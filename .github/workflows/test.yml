name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose --features test
    - name: Run tests release
      run: cargo test --release --verbose --features test

    - name: Set up Rust (nightly) for Miri
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
    - name: Install Miri
      run: rustup component add miri
    - name: Run known safe tests with Miri
      run: |
        set -euo pipefail

        MIRIFLAGS=-Zmiri-ignore-leaks cargo miri test --lib scoped::tests::normal_tests --features test;
        MIRIFLAGS=-Zmiri-ignore-leaks cargo miri test --lib scoped::tests::macro_tests --features test;
        MIRIFLAGS=-Zmiri-ignore-leaks cargo miri test --lib scoped_pin::tests::normal_test --features test;
        MIRIFLAGS=-Zmiri-ignore-leaks cargo miri test --lib scoped_pin::tests::macro_tests --features test;
    - name: Run tests that are known to fail with Miri
      run: |
        set -euo pipefail

        # List only test *functions* inside tests::ub_tests, keep their full paths
        TESTS=$(cargo test tests::ub_tests:: -- --list --format terse \
          | sed -nE '/.*::ub_tests::.*: test$/ { s/: test$//; p }')

        echo "UB tests found:"
        printf '%s\n' "$TESTS"
        echo

        EXITCODE=0
        for t in $TESTS; do
          echo "Running UB test: $t"
          if MIRIFLAGS="-Zmiri-ignore-leaks" cargo miri test --lib "$t" --features test -- --exact; then
            echo "❌ ERROR: UB test '$t' unexpectedly PASSED"
            EXITCODE=1
          else
            echo "✅ UB test '$t' failed as expected (Miri detected UB)"
          fi
          echo
        done

        exit $EXITCODE